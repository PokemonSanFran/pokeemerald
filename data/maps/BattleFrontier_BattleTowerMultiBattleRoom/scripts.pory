const OPPONENT_1 = 1
const ATTENDANT_1 = 2
const ATTENDANT_2 = 3
const OPPONENT_2 = 4
const PLAYER = 5
const PARTNER = 6

const VAR_CURRENT_BATTLE_NUM = VAR_TEMP_E

mapscripts BattleFrontier_BattleTowerMultiBattleRoom_MapScripts{
    MAP_SCRIPT_ON_TRANSITION{
        if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_MULTIS){
            call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_SetObjGfx)
        }

        if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
            special(SetBattleTowerLinkPlayerGfx)
        }
        end
    }

    MAP_SCRIPT_ON_WARP_INTO_MAP_TABLE[
        VAR_TEMP_1, 0: BattleFrontier_BattleTowerMultiBattleRoom_EventScript_HidePlayerObj
    ]

    MAP_SCRIPT_ON_FRAME_TABLE[
        VAR_TEMP_0, 0: BattleFrontier_BattleTowerMultiBattleRoom_EventScript_EnterRoom
    ]
}

// On this map the player (OBJ_EVENT_ID_PLAYER) is hidden
// The player is represented instead by LOCALID_PLAYER, which has the gfx id VAR_OBJ_GFX_ID_F
// The multi partner is represented by LOCALID_PARTNER, which has the gfx id VAR_OBJ_GFX_ID_E

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_SetObjGfx{
    tower_setpartnergfx
    checkplayergender
    if(var(VAR_RESULT) == FEMALE){
        setvar(VAR_OBJ_GFX_ID_F, OBJ_EVENT_GFX_MAY_NORMAL)
    }else{
        setvar(VAR_OBJ_GFX_ID_F, OBJ_EVENT_GFX_BRENDAN_NORMAL)
    }
    return
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_HidePlayerObj{
    hideobjectat(OBJ_EVENT_ID_PLAYER, MAP_BATTLE_FRONTIER_BATTLE_TOWER_MULTI_BATTLE_ROOM)
    end
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_EnterRoom{
    setvar(VAR_TEMP_0, 1)
    applymovement(PLAYER, BattleFrontier_BattleTowerMultiBattleRoom_Movement_PlayerEnterRoom)
    applymovement(PARTNER, BattleFrontier_BattleTowerMultiBattleRoom_Movement_PartnerEnterRoom)
    waitmovement(0)

    frontier_get(FRONTIER_DATA_BATTLE_NUM)
    if(var(VAR_RESULT) == 0){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_OpponentsEnter)
    }

    call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AttendantGoToChallengers)

    frontier_set(FRONTIER_DATA_RECORD_DISABLED, TRUE)
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AttendantGoToChallengers{
    applymovement(ATTENDANT_1, BattleFrontier_BattleTowerMultiBattleRoom_Movement_AttendantApproachPlayer)
    applymovement(ATTENDANT_2, BattleFrontier_BattleTowerMultiBattleRoom_Movement_AttendantApproachPlayer)
    waitmovement(0)
    applymovement(PLAYER, BattleFrontier_BattleTowerMultiBattleRoom_Movement_FaceAttendant)
    applymovement(PARTNER, BattleFrontier_BattleTowerMultiBattleRoom_Movement_FaceAttendant)
    waitmovement(0)
    return
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_OpponentsEnter{
    tower_setopponent

    addobject(OPPONENT_1)
    addobject(OPPONENT_2)
    applymovement(OPPONENT_1, BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent1Enter)
    applymovement(OPPONENT_2, BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent2Enter)
    waitmovement(0)

    call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_DoOpponentIntros)

    call(BattleFrontier_BattleTowerBattleRoom_EventScript_DoTowerBattle)
    switch(var(VAR_RESULT)){
        case B_OUTCOME_WON:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_DefeatedOpponents)
    }
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyLost)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_DoOpponentIntros{
    tower_getopponentintro(0)

    delay(15)
    applymovement(OPPONENT_1, BattleFrontier_BattleTowerMultiBattleRoom_Movement_WalkInPlaceLeft)
    waitmovement(0)

    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        messageautoscroll(gStringVar4)
    }else{
        msgbox(gStringVar4, MSGBOX_DEFAULT)
    }
    waitmessage

    tower_getopponentintro(1)

    applymovement(OPPONENT_2, BattleFrontier_BattleTowerMultiBattleRoom_Movement_WalkInPlaceLeft)
    waitmovement(0)

    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        messageautoscroll(gStringVar4)
        waitmessage
    }else{
        msgbox(gStringVar4, MSGBOX_DEFAULT)
        call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_LinkDelayForMsg)
    }
    return
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_DefeatedOpponents{
    call(BattleFrontier_EventScript_IncrementWinStreak)

    tower_setbattlewon
    if(var(VAR_RESULT) == 7){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyWon)
    }

    applymovement(OPPONENT_2, BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent2Exit)
    applymovement(OPPONENT_1, BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent1Exit)
    waitmovement(0)
    removeobject(OPPONENT_1)
    removeobject(OPPONENT_2)

    call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AttendantGoToChallengers)

    call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_InformPlayerHeal)
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_RestoreParty)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_InformPlayerHeal{
    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        messageautoscroll(BattleFrontier_BattleTowerBattleRoom_Text_RestoreMonsToFullHealth)
        call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_LinkDelayForMsg)
    }else{
        msgbox(BattleFrontier_BattleTowerBattleRoom_Text_RestoreMonsToFullHealth, MSGBOX_DEFAULT)
    }
    return
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_RestoreParty{
    special(LoadPlayerParty)
    frontier_setpartyorder(FRONTIER_MULTI_PARTY_SIZE)

    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ReconnectLink)
    }

    playfanfare(MUS_HEAL)
    waitfanfare
    special(HealPlayerParty)

    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents{
    frontier_get(FRONTIER_DATA_BATTLE_NUM)
    call(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ReadyForNextOpponentSet)

    //NOTE
    // In Vanilla, the following if statement calls BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallenge.
    // In the refactoring of this script, it was changed to BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsLink, rather than sending them there after BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ReadyForNextOpponentSet.
    // When this change is made, the connection stalls in BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallengeLink after LinkRetireStatusWithBattleTowerPartner, but there is seemingly no reason why.

   if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallenge)
    }

    call(BattleFrontier_EventScript_GetCantRecordBattle)
    if(var(VAR_RESULT) == TRUE){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsNoRecord)
    }

    multichoice(19, 4, MULTI_GO_ON_RECORD_REST_RETIRE, TRUE)
    switch(var(VAR_RESULT)){
        case 0:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallenge)
        case 1:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRecordBattle)
        case 2:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskPauseChallenge)
        case 3:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge)
        case MULTI_B_PRESSED:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
    }
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsNoRecord{
    multichoice(20, 6, MULTI_GO_ON_REST_RETIRE, TRUE)
    switch(var(VAR_RESULT)){
        case 0:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallenge)
        case 1:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskPauseChallenge)
        case 2:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge)
        case MULTI_B_PRESSED:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
    }
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRecordBattle{
    message(BattleFrontier_BattleTowerBattleRoom_Text_RecordYourBattle)
    waitmessage
    multichoicedefault(20, 8, MULTI_YESNO, 1, FALSE)
    if(var(VAR_RESULT) != 0){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
    }

    call(BattleFrontier_EventScript_SaveBattle)
    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        setflag(FLAG_TEMP_2)
    }
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskPauseChallenge{
    msgbox(BattleFrontier_BattleTowerBattleRoom_Text_SaveAndQuitGame, MSGBOX_YESNO)
    switch(var(VAR_RESULT)){
        case NO:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
        case YES:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_PauseChallenge)
        case MULTI_B_PRESSED:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
    }
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge{
    message(BattleFrontier_BattleTowerBattleRoom_Text_CancelYourChallenge)
    waitmessage
    multichoicedefault(20, 8, MULTI_YESNO, 1, FALSE)

    if(var(VAR_RESULT) == 0){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_RetireChallenge)
    }

    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponents)
    end
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_RetireChallenge{
    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_RetireChallengeLink)
    }else{
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyLost)
    }
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallenge{
    closemessage
    clearflag(FLAG_TEMP_2)

    applymovement(PLAYER, BattleFrontier_BattleTowerMultiBattleRoom_Movement_FaceBattle)
    applymovement(PARTNER, BattleFrontier_BattleTowerMultiBattleRoom_Movement_FaceBattle)
    waitmovement(0)
    applymovement(ATTENDANT_1, BattleFrontier_BattleTowerMultiBattleRoom_Movement_AttendantReturnToPos)
    applymovement(ATTENDANT_2, BattleFrontier_BattleTowerMultiBattleRoom_Movement_AttendantReturnToPos)
    waitmovement(0)

    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_OpponentsEnter)
    end
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_SetChallengeStatus{
    tower_set(TOWER_DATA_LVL_MODE)
    setvar(VAR_0x8004, FANCOUNTER_USED_BATTLE_TOWER)
    special(Script_TryGainNewFanFromCounter)
    goto(BattleFrontier_BattleTowerBattleRoom_EventScript_WarpToLobby)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyLost{
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS, CHALLENGE_STATUS_LOST)
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_SetChallengeStatus)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyWon{
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS, CHALLENGE_STATUS_WON)
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_SetChallengeStatus)
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_PauseChallenge{
    message(BattleFrontier_BattleTowerBattleRoom_Text_SavingPleaseWait)
    waitmessage
    tower_save(CHALLENGE_STATUS_PAUSED)
    playse(SE_SAVE)
    waitse
    fadescreen(1)
    frontier_reset
    end
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ReadyForNextOpponentSet{
    copyvar(VAR_CURRENT_BATTLE_NUM, VAR_RESULT)
    addvar(VAR_CURRENT_BATTLE_NUM,1)
    buffernumberstring(STR_VAR_3,VAR_CURRENT_BATTLE_NUM)

    message(BattleFrontier_BattleTowerBattleRoom_Text_ReadyForXOpponent)
    waitmessage

    //NOTE 3: This exists in Vanilla and needed to be replicated here.
    if(var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsLink)
    }
    return
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_LinkDelayForMsg{
    waitmessage
    delay(48)
    return
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsLink{
    if(flag(FLAG_TEMP_2)){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsLinkNoRecord)
    }

    multichoice(19, 6, MULTI_GO_ON_RECORD_RETIRE, TRUE)
    switch(var(VAR_RESULT)){
        case 0:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallengeLink)
        case 1:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRecordBattle)
        case 2:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge)
        case MULTI_B_PRESSED:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge)
     end
    }
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskReadyForOpponentsLinkNoRecord{
    multichoice(20, 8, MULTI_GO_ON_RETIRE, TRUE)
    switch(var(VAR_RESULT)){
        case 0:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallengeLink)
        case 1:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge)
        case MULTI_B_PRESSED:goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_AskRetireChallenge)
    }
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ContinueChallengeLink{
    setvar(VAR_0x8004, BATTLE_TOWER_LINK_CONTINUE)
    setvar(VAR_0x8005, 0)
    message(gText_LinkStandby3)
    waitmessage
    special(LinkRetireStatusWithBattleTowerPartner)
    //NOTE 2: This is where the game will hang.
    waitstate
    if(var(VAR_RESULT) != BATTLE_TOWER_LINKSTAT_CONTINUE){
        goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyLost)
    }
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_LinkDelayForMsg)
    end
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_RetireChallengeLink{
    setvar(VAR_0x8004, BATTLE_TOWER_LINK_RETIRE)
    setvar(VAR_0x8005, 0)
    message(gText_LinkStandby3)
    waitmessage
    special(LinkRetireStatusWithBattleTowerPartner)
    waitstate
    goto(BattleFrontier_BattleTowerMultiBattleRoom_EventScript_WarpToLobbyLost)
    end
}

script BattleFrontier_BattleTowerMultiBattleRoom_EventScript_ReconnectLink{
    special(BattleTowerReconnectLink)
    return
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_PlayerEnterRoom{
    walk_up * 4
    face_right
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_PartnerEnterRoom{
    walk_left
    walk_up * 3
    face_right
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_FaceAttendant{
    face_left
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_FaceBattle{
    walk_in_place_faster_right
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent1Enter{
    walk_down * 4
    face_left
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent2Enter{
    walk_right
    walk_down * 3
    face_left
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent2Exit{
    walk_up * 3
    set_invisible
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_Opponent1Exit{
    walk_up * 4
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_AttendantApproachPlayer{
    walk_right * 2
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_AttendantReturnToPos{
    walk_left * 2
    walk_in_place_faster_right
    step_end
}

movement BattleFrontier_BattleTowerMultiBattleRoom_Movement_WalkInPlaceLeft{
    walk_in_place_left
    step_end
}

text BattleFrontier_BattleTowerMultiBattleRoom_Text_ReadyForXOpponent{
    "You will be facing opponent no. {STR_VAR_3}.\nAre you ready?"
}

text gText_LinkStandby3{
    "Link standby…"
}

text gText_YourPartnerHasRetired{
    "Your partner has retired.\pYour BATTLE ROOM challenge\nwill be canceled."
}
