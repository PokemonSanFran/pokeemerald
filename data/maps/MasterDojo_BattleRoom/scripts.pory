//MasterDojo_BattleRoom_
const PLAYER = OBJ_EVENT_ID_PLAYER
const CAMERA = OBJ_EVENT_ID_CAMERA
const ATTENDANT = 1
const OPPONENT = 2

mapscripts MasterDojo_BattleRoom_MapScripts{
    MAP_SCRIPT_ON_FRAME_TABLE[
        VAR_TEMP_0, 0: MasterDojo_BattleRoom_EventScript_EnterRoom
    ]
}

script MasterDojo_BattleRoom_EventScript_EnterRoom{
    setvar(VAR_TEMP_0,1)
        applymovement(ATTENDANT,MasterDojo_BattleRoom_Movement_AttendantEnter)
        applymovement(PLAYER,MasterDojo_BattleRoom_Movement_PlayerEnter)
        waitmovement(ATTENDANT)
        frontier_get(FRONTIER_DATA_BATTLE_NUM)
        if (var(VAR_RESULT) == 0){
            goto(MasterDojo_BattleRoom_EventScript_OpponentEnter)
        }
    applymovement(ATTENDANT,MasterDojo_BattleRoom_Movement_AttendantApproachPlayer)
        applymovement(PLAYER,Common_Movement_FaceUp)
        waitmovement(ATTENDANT)
        setvar(VAR_TEMP_2,1)
        frontier_set(FRONTIER_DATA_RECORD_DISABLED,TRUE)
        goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
}

script MasterDojo_BattleRoom_EventScript_OpponentEnter{
        sparring_setopponent
        addobject(OPPONENT)
        waitmovement(CAMERA)
        special(RemoveCameraObject)
        sparring_getopponentintro(0)
        msgbox(gStringVar4,MSGBOX_DEFAULT)
        waitmessage
        call(MasterDojo_BattleRoom_EventScript_DoTowerBattle)
        switch (var(VAR_RESULT)){
            case B_OUTCOME_WON: goto(MasterDojo_BattleRoom_EventScript_DefeatedOpponent)
        }
    goto(MasterDojo_BattleRoom_EventScript_WarpToLobbyLost)
}

script MasterDojo_BattleRoom_EventScript_WarpToLobbyLost{
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS,CHALLENGE_STATUS_LOST)
        sparring_set(SPARRING_DATA_LVL_MODE)
        goto(MasterDojo_BattleRoom_EventScript_WarpToLobby)
}

script MasterDojo_BattleRoom_EventScript_WarpToLobby{
    warp(MAP_MASTER_DOJO_LOBBY,7,9)
        waitstate
        end
}

script MasterDojo_BattleRoom_EventScript_DefeatedOpponent{
        call(BattleFrontier_EventScript_IncrementWinStreak)
        sparring_setbattlewon
        special(SpawnCameraObject)
        applymovement(CAMERA,MasterDojo_BattleRoom_Movement_PanCameraLeft)
        applymovement(PLAYER,MasterDojo_BattleRoom_Movement_PlayerReturnPosition)
        applymovement(ATTENDANT,MasterDojo_BattleRoom_Movement_AttendantApproachPlayer)
        waitmovement(CAMERA)
        removeobject(OPPONENT)
        waitmovement(ATTENDANT)
        goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
}

script MasterDojo_BattleRoom_EventScript_AskReadyForOpponent{
    frontier_get(FRONTIER_DATA_BATTLE_NUM)
        call(MasterDojo_BattleRoom_EventScript_ReadyForOpponent)
        call(BattleFrontier_EventScript_GetCantRecordBattle)
        if (var(VAR_RESULT)){
            goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponentNoRecord)
        }
    multichoice(19,4,MULTI_GO_ON_RECORD_REST_RETIRE,TRUE)
        switch(var(VAR_RESULT)){
            case 0: goto(MasterDojo_BattleRoom_EventScript_ContinueChallenge)
            case 1: goto(MasterDojo_BattleRoom_EventScript_AskRecordBattle)
            case 2: goto(MasterDojo_BattleRoom_EventScript_AskPauseChallenge)
            case 3: goto(MasterDojo_BattleRoom_EventScript_AskRetireChallenge)
            case MULTI_B_PRESSED: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
        }
}

script MasterDojo_BattleRoom_EventScript_AskReadyForOpponentNoRecord{
    multichoice(20,6,MULTI_GO_ON_REST_RETIRE,TRUE)
        switch(var(VAR_RESULT)){
            case 0: goto(MasterDojo_BattleRoom_EventScript_ContinueChallenge)
            case 1: goto(MasterDojo_BattleRoom_EventScript_AskPauseChallenge)
            case 2: goto(MasterDojo_BattleRoom_EventScript_AskRetireChallenge)
            case 3: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponentNoRecord)
        }
}

script MasterDojo_BattleRoom_EventScript_AskRecordBattle{
    message(MasterDojo_Lobby_Text_RecordLastMatch)
        waitmessage
        multichoicedefault(20, 8, MULTI_YESNO, 1, FALSE)
        switch(var(VAR_RESULT)){
            case 0: goto(MasterDojo_BattleRoom_EventScript_RecordBattle)
            case 1: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
        }
}

script MasterDojo_BattleRoom_EventScript_RecordBattle{
    call(BattleFrontier_EventScript_SaveBattle)
        goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
}

script MasterDojo_BattleRoom_EventScript_AskPauseChallenge{
    msgbox(BattleFrontier_BattleTowerBattleRoom_Text_SaveAndQuitGame,MSGBOX_YESNO)
        switch (var(VAR_RESULT)){
            case NO: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
            case YES: goto(MasterDojo_BattleRoom_EventScript_PauseChallenge)
            case MULTI_B_PRESSED: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
        }
}

script MasterDojo_BattleRoom_EventScript_AskRetireChallenge{
    message(BattleFrontier_BattleTowerBattleRoom_Text_CancelYourChallenge)
    waitmessage
    multichoicedefault(20, 8, MULTI_YESNO, 1, FALSE)
    switch(var(VAR_RESULT)){
        case 0: goto(MasterDojo_BattleRoom_EventScript_RetireChallenge)
        case 1: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
        case MULTI_B_PRESSED: goto(MasterDojo_BattleRoom_EventScript_AskReadyForOpponent)
}
}

script MasterDojo_BattleRoom_EventScript_ContinueChallenge{
    closemessage
    applymovement(PLAYER,MasterDojo_BattleRoom_Movement_PlayerStartBattle)
    applymovement(CAMERA,MasterDojo_BattleRoom_Movement_PanCameraRight)
    applymovement(ATTENDANT,MasterDojo_BattleRoom_Movement_ReturnToPosition)
    waitmovement(ATTENDANT)
    goto(MasterDojo_BattleRoom_EventScript_OpponentEnter)
}

script MasterDojo_BattleRoom_EventScript_WarpToLobbyWon{
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS,CHALLENGE_STATUS_WON)
    sparring_set(TOWER_DATA_LVL_MODE)
    goto(MasterDojo_BattleRoom_EventScript_WarpToLobby)
}

script MasterDojo_BattleRoom_EventScript_PauseChallenge{
    message(BattleFrontier_BattleTowerBattleRoom_Text_SavingPleaseWait)
    waitmessage
    sparring_save(CHALLENGE_STATUS_PAUSED)
    playse(SE_SAVE)
    waitse
    fadescreen(FADE_TO_BLACK)
    frontier_reset
    end
}

script MasterDojo_BattleRoom_EventScript_ReadyForOpponent{
	message(BattleFrontier_BattleTowerBattleRoom_Text_ReadyFor6thOpponent)
    waitmessage
    return
}

script MasterDojo_BattleRoom_EventScript_DoTowerBattle{
    closemessage
    setvar(VAR_TEMP_2,0)
    frontier_set(FRONTIER_DATA_RECORD_DISABLED,FALSE)
    setvar(VAR_0x8004,SPECIAL_BATTLE_SPARRING)
    setvar(VAR_0x8005,0)
    special(DoSpecialTrainerBattle)
    waitstate
    copyvar(VAR_0x8004,VAR_FRONTIER_BATTLE_MODE)
    frontier_restorehelditems // need to explore this. what does this restore?
    frontier_resetsketch
    goto(MasterDojo_BattleRoom_EventScript_EndTowerBattle)
}

script MasterDojo_BattleRoom_EventScript_EndTowerBattle{
    frontier_get(FRONTIER_DATA_BATTLE_OUTCOME)
    return
}

script MasterDojo_BattleRoom_EventScript_RetireChallenge{
    setflag(FLAG_CANCEL_BATTLE_ROOM_CHALLENGE)
	goto(MasterDojo_BattleRoom_EventScript_WarpToLobbyWon)
}

movement MasterDojo_BattleRoom_Movement_AttendantEnter{
    walk_right * 6
    walk_up * 2
    face_down
    step_end
}

movement MasterDojo_BattleRoom_Movement_PlayerEnter{
    walk_right * 5
    step_end
}

movement MasterDojo_BattleRoom_Movement_AttendantApproachPlayer{
    walk_left * 3
    walk_down
    step_end
}

movement MasterDojo_BattleRoom_Movement_PlayerStartBattle{
    walk_right
    step_end
}

movement MasterDojo_BattleRoom_Movement_PlayerReturnPosition{
    walk_left
    face_up
    step_end
}

movement MasterDojo_BattleRoom_Movement_ReturnToPosition{
    walk_up
    walk_right * 3
    face_down
    step_end
}

movement MasterDojo_BattleRoom_Movement_PanCameraLeft{
    walk_left * 4
    step_end
}

movement MasterDojo_BattleRoom_Movement_PanCameraRight{
    walk_right * 4
    step_end
}
