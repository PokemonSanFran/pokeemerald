#ifdef BATTLE_ARCADE
// If you pulled the `battle_arcade` branch, this feature will not work out of the box.
// data/maps/BattleArcade_Lobby/scripts.inc has the mapscripts that are required to go in the entrance or lobby of your intended Battle Facility.
// data/maps/BattleArcade_BattleRoom/scripts.inc has the mapscripts that are required to go in the arena of Battle Room of your intended Battle Facility.
// data/scripts/battle_arcade_registration.inc and data/scritps/battle_arcade_battle.inc have all of the scripts for Battle Arcade to work, but all of the calls to map specific scripts have been commented out.
// You will need to manually re-enable them.
// Read more on the feature's wiki:
// https://github.com/PokemonSanFran/pokeemerald/wiki/battle_arcade#script-dependency

const PLAYER = OBJ_EVENT_ID_PLAYER

const CHALLENGE_STATUS_UNKNOWN = 0
const CHALLENGE_STATUS_END = 255

const VAR_FACILITY_CHALLENGE_STATUS = VAR_TEMP_0
const VAR_NEED_TO_FACE_NORTH = VAR_TEMP_1
const VAR_CURRENT_BATTLE_NUM = VAR_TEMP_E

script BattleArcade_Entrance_EventScript_GetChallengeStatus
{
    frontier_getstatus
    end
}

script BattleArcade_Entrance_EventScript_QuitWithoutSaving
{
    lock
    faceplayer
    delay(30)
    msgbox(BattleArcade_Entrance_Text_DidntSaveBeforeQuitting, MSGBOX_DEFAULT)
    arcade_set(ARCADE_DATA_WIN_STREAK, 0)
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS, CHALLENGE_STATUS_UNKNOWN)
    setvar(VAR_FACILITY_CHALLENGE_STATUS, CHALLENGE_STATUS_END)
    goto(BattleArcade_Entrance_EventScript_SetChallengeStatusEnd)
}

script BattleArcade_Entrance_EventScript_AskEnterChallenge
{
    lock
    faceplayer
    setvar(VAR_FRONTIER_FACILITY,FRONTIER_FACILITY_ARCADE)
    special(SavePlayerParty)
    message(BattleArcade_Entrance_Text_HiyahDo)
    waitmessage

    multichoice(17, 6, MULTI_CHALLENGEINFO, FALSE)
    switch(var(VAR_RESULT))
    {
        case 0: goto(BattleArcade_Entrance_EventScript_TryEnterChallenge)
        case 1: goto(BattleArcade_Entrance_EventScript_ExplainChallenge)
        case MULTI_B_PRESSED:
        case 2: goto(BattleArcade_Entrance_EventScript_DenyChallenge)
    }
}

script BattleArcade_Entrance_EventScript_TryEnterChallenge
{
    message(BattleArcade_Entrance_Text_OffersTwoLevels)
    waitmessage

    multichoice(17, 6, MULTI_LEVEL_MODE, FALSE)
    switch(var(VAR_RESULT))
    {
        case FRONTIER_LVL_TENT:
        case MULTI_B_PRESSED: goto(BattleArcade_Entrance_EventScript_CancelChallenge)
    }

    message(BattleArcade_Entrance_Text_SelectTheTypeYouWant)
    waitmessage
    frontier_set(FRONTIER_DATA_LVL_MODE, VAR_RESULT)
    call(BattleArcade_Entrance_EventScript_CreateTypeList)
    frontier_checkineligible
    goto_if_eq(VAR_0x8004, TRUE, BattleArcade_Entrance_EventScript_NotEnoughValidMons)
    fadescreen(FADE_TO_BLACK)
    frontier_get(FRONTIER_DATA_LVL_MODE)
    copyvar(VAR_0x8004, VAR_RESULT)
    setvar(VAR_0x8005, FRONTIER_PARTY_SIZE)
    special(ChoosePartyForBattleFrontier)
    waitstate
    goto_if_eq(VAR_RESULT, 0, BattleArcade_Entrance_EventScript_LoadPartyCancelChallenge)

    msgbox(BattleArcade_Entrance_Text_BeforeDivingInto, MSGBOX_YESNO)
    switch(var(VAR_RESULT))
    {
        case YES: goto(BattleArcade_Entrance_EventScript_SaveBeforeChallenge)
        case NO:
        case MULTI_B_PRESSED: goto(BattleArcade_Entrance_EventScript_LoadPartyCancelChallenge)
    }
}

script BattleArcade_Entrance_EventScript_CreateTypeList
{
    setvar(VAR_0x8009,0)
    setvar(VAR_0x8004,SCROLL_MULTI_POKEMON_FAN_CLUB_RATER)
    special(ShowScrollableMultichoice)
    waitstate
    switch(var(VAR_RESULT))
    {
        default: arcade_convertmenutotype
        case 17:
        case MULTI_B_PRESSED: goto(BattleArcade_Entrance_EventScript_CancelChallenge)
    }

    arcade_bufferarcadetype
    return
}

script BattleArcade_Entrance_EventScript_SaveBeforeChallenge
{
    frontier_set(FRONTIER_DATA_SELECTED_MON_ORDER)
    setvar(VAR_FACILITY_CHALLENGE_STATUS, 0)
    arcade_init
    frontier_set(FRONTIER_DATA_PAUSED, FALSE)
    special(LoadPlayerParty)
    closemessage
    delay(2)

    call(Common_EventScript_SaveGame)
    special(HealPlayerParty)
    setvar(VAR_FACILITY_CHALLENGE_STATUS, CHALLENGE_STATUS_END)

    if (var(VAR_RESULT) == 0)
    {
        frontier_set(FRONTIER_DATA_CHALLENGE_STATUS)  // No status provided, so it relies on VAR_0x8006 being 0 already
        goto(BattleArcade_Entrance_EventScript_DenyChallenge)
    }

    goto(BattleArcade_Entrance_EventScript_WarpToBattleRoom)
}

script BattleArcade_Entrance_EventScript_ExplainChallenge
{
    msgbox(BattleArcade_Entrance_Text_BattleArcadeIsATraining, MSGBOX_YESNO)

    if (var(VAR_RESULT) == YES)
    {
        goto(BattleArcade_Entrance_EventScript_TryEnterChallenge)
    }

    msgbox(BattleArcade_Entrance_Text_IWontForceYou,MSGBOX_DEFAULT)
    releaseall
    end
}

script BattleArcade_Entrance_EventScript_NotEnoughValidMons
{
    frontier_get(FRONTIER_DATA_LVL_MODE)
    copyvar(VAR_0x8004, VAR_RESULT)

    if(var(VAR_RESULT) == FRONTIER_LVL_50)
    {
        msgbox(BattleArcade_Entrance_Text_NotEnoughValidMonsLv50Singles, MSGBOX_DEFAULT)
    }
    else
    {
        msgbox(BattleArcade_Entrance_Text_NotEnoughValidMonsLvOpenSingles, MSGBOX_DEFAULT)
    }

    release
    end
}

script BattleArcade_Entrance_EventScript_LoadPartyCancelChallenge
{
    special(LoadPlayerParty)
    goto(BattleArcade_Entrance_EventScript_CancelChallenge)
}

script BattleArcade_Entrance_EventScript_CancelChallenge
{
    msgbox(BattleArcade_Entrance_Text_OhYouChangedYour, MSGBOX_DEFAULT)
    release
    end
}

script BattleArcade_Entrance_EventScript_DenyChallenge
{
    msgbox(BattleArcade_Entrance_Text_IWontForceYou, MSGBOX_DEFAULT)
    release
    end
}

script BattleArcade_Entrance_EventScript_WarpToBattleRoom
{
    setvar(VAR_0x8004, FRONTIER_UTIL_FUNC_SET_PARTY_ORDER)
    setvar(VAR_0x8005, FRONTIER_PARTY_SIZE)
    special(CallFrontierUtilFunc)
    frontier_saveparty
    setvar(VAR_RESULT, 0)
    warp(MAP_BATTLE_ARCADE_BATTLE_ROOM, 0, 6)
    arcade_save(CHALLENGE_STATUS_SAVING)
}

script BattleArcade_Entrance_EventScript_JudgeChallenge
{
    arcade_get(ARCADE_DATA_WIN_STREAK)

    if (var(VAR_RESULT) == 0)
    {
        goto(BattleArcade_Entrance_EventScript_Results_NoWins)
    }
    else
    {
        buffernumberstring(STR_VAR_1,VAR_RESULT)
        goto(BattleArcade_Entrance_EventScript_Results)
    }
}

script BattleArcade_Entrance_EventScript_Results_NoWins
{
    lock
    faceplayer
    call(BattleArcade_Entrance_EventScript_SaveResult)
    call(BattleArcade_Entrance_EventScript_AskSaveBattle)
    msgbox(BattleArcade_Entrance_Text_YouLostbutTrainYourself, MSGBOX_DEFAULT)
    goto(BattleArcade_Entrance_EventScript_SetChallengeStatusEnd)
}

script BattleArcade_Entrance_EventScript_Results
{
    lock
    faceplayer
    call(BattleArcade_Entrance_EventScript_SaveResult)

    arcade_bufferarcadetype
    arcade_get(ARCADE_DATA_WIN_STREAK)
    buffernumberstring(STR_VAR_1,VAR_RESULT)

    msgbox(BattleArcade_Entrance_Text_YourResultForThisRestricted)
    call(BattleArcade_Entrance_EventScript_AwardPoints)

    if (flag(FLAG_ARCADE_FIRST_TYPE_WIN))
    {
        msgbox(BattleArcade_Entrance_Text_TheWayYouHandleType)
        call(BattleArcade_Entrance_EventScript_CheckSymbol)
    }

    call(BattleArcade_Entrance_EventScript_AskSaveBattle)
    goto(BattleArcade_Entrance_EventScript_SetChallengeStatusEnd)
}

script BattleArcade_Entrance_EventScript_SaveResult
{
    message(BattleArcade_Entrance_Text_RecordWillBeSaved)
    waitmessage
    frontier_checkairshow
    arcade_givepoints
    arcade_checksymbol

    if (var(VAR_RESULT) == ARCADE_SYMBOL_SILVER)
    {
        setflag(FLAG_SYS_ARENA_SILVER)
    }
    elif (var(VAR_RESULT) == ARCADE_SYMBOL_GOLD)
    {
        setflag(FLAG_SYS_ARENA_GOLD)
    }

    special(LoadPlayerParty)
    arcade_save(0)
    playse(SE_SAVE)
    waitse
    return
}

script BattleArcade_Entrance_EventScript_AwardPoints{
    msgbox(BattleArcade_Entrance_Text_YouEarned)
    return
}

script BattleArcade_Entrance_EventScript_CheckSymbol
{
    arcade_checksymbol
    if (var(VAR_RESULT) > ARCADE_SYMBOL_NONE)
    {
        call(BattleArcade_Entrance_EventScript_GiveSymbol)
    }
    return
}

script BattleArcade_Entrance_EventScript_GiveSymbol
{
    msgbox(BattleArcade_Entrance_Text_WhatYouCompletedRestricted)

    if (var(VAR_RESULT) == ARCADE_SYMBOL_SILVER)
    {
        msgbox(BattleArcade_Entrance_Text_ThatsExcellentWork)
    }
    else
    {
        msgbox(BattleArcade_Entrance_Text_ICantBelieveIt)
        msgbox(BattleArcade_Entrance_Text_ThisAccomplishmentIsSureTo)
    }

    msgbox(BattleArcade_Entrance_Text_ToCommemorateThisMonumentalAchievement)
    playfanfare(MUS_OBTAIN_SYMBOL)

    if (var(VAR_RESULT) == ARCADE_SYMBOL_SILVER)
    {
        message(BattleFrontier_BattleArenaBattleRoom_Text_ReceivedGutsSymbol)
    }
    else
    {
        message(BattleFrontier_BattleArenaBattleRoom_Text_GutsSymbolTookGoldenShine)
    }

    waitmessage
    waitfanfare

    if (var(VAR_RESULT) == ARCADE_SYMBOL_GOLD)
    {
        msgbox(BattleArcade_Entrance_Text_IHopeYoullKeep)
    }
    return
}

script BattleArcade_Entrance_EventScript_AskSaveBattle
{
    frontier_get(FRONTIER_DATA_RECORD_DISABLED)

    if (var(VAR_RESULT) == TRUE)
    {
        return
    }

    message(BattleArcade_Entrance_Text_RecordLastMatch)
    waitmessage
    multichoicedefault(20, 8, MULTI_YESNO, 1, FALSE)

    if (var(VAR_RESULT) == 0)
    {
        call(BattleArcade_Entrance_EventScript_SaveBattle)
    }
    return
}

script BattleArcade_Entrance_EventScript_SaveBattle
{
    frontier_savebattle
    if (var(VAR_RESULT))
    {
        playse(SE_SAVE)
        msgbox(BattleFrontier_BattleTowerLobby_Text_BattleRecordedOnPass, MSGBOX_DEFAULT)
    }
    else
    {
        msgbox(BattleArcade_Entrance_Text_ThereWasAGlitch, MSGBOX_DEFAULT)
    }
    return
}

script BattleArcade_Entrance_EventScript_SetChallengeStatusEnd
{
    setvar(VAR_FACILITY_CHALLENGE_STATUS, CHALLENGE_STATUS_END)
    closemessage
    setvar(VAR_ARCADE_TYPE,TYPE_NONE)
    release
    end
}

script BattleArcade_Entrance_EventScript_ResumeChallenge
{
    lock
    faceplayer

    message(BattleArcade_Entrance_Text_WeveBeenWaitingForYou)
    waitmessage
    message(BattleArcade_Entrance_Text_ProgressWillBeSaved)
    waitmessage

    playse(SE_SAVE)
    waitse
    frontier_set(FRONTIER_DATA_PAUSED, FALSE)

    goto(BattleArcade_Entrance_EventScript_WarpToBattleRoom)
    end
}

script BattleArcade_Entrance_EventScript_ShowResults
{
    lockall
    frontier_results(FRONTIER_FACILITY_ARCADE,0)
    waitbuttonpress
    special(RemoveRecordsWindow)
    releaseall
    end
}

script BattleArcade_EventScript_RulesBoard
{
    lockall
    msgbox(BattleArcade_Entrance_Text_RulesAreListed,MSGBOX_DEFAULT)
    goto(BattleArcade_Entrance_EventScript_ReadRulesBoard)
    end
}

script BattleArcade_Entrance_EventScript_ReadRulesBoard
{
    message(BattleFrontier_BattleTowerLobby_Text_ReadWhichHeading)
    waitmessage
    multichoice(17,2,MULTI_BATTLE_ARCADE_RULES,FALSE)

    switch(var(VAR_RESULT))
    {
        case 0:
            msgbox(BattleArcade_Entrance_Text_OverviewBoard,MSGBOX_DEFAULT)
        case 1:
            msgbox(BattleArcade_Entrance_Text_RestrictionsBoard,MSGBOX_DEFAULT)
        case 2:
            msgbox(BattleArcade_Entrance_Text_RewardsBoard,MSGBOX_DEFAULT)
        case 3:
        case MULTI_B_PRESSED:
            releaseall
            end
    }
    goto(BattleArcade_EventScript_RulesBoard)
    end
}

text BattleArcade_Entrance_Text_RulesAreListed
{
    format("The BATTLE ARCADE rules are listed.")
}

text BattleArcade_Entrance_Text_OverviewBoard
{
    format("BATTLE ARCADE is challenges you to battle using up to three POKéMON of a single type. Select a level mode and a type, then battle your way through five consecutive battles.")
}

text BattleArcade_Entrance_Text_RestrictionsBoard
{
    format("No duplicate POKéMON or items are allowed. You can only restore your POKéMON twice in total, so use your opportunities wisely.")
}

text BattleArcade_Entrance_Text_RewardsBoard
{
    format("If you can win five times in a row, you will complete the training, but you can continue to increase your streak. You'll recieve a reward for completing training for all types in a level mode.")
}

text BattleArcade_Entrance_Text_HiyahDo
{
    format("Hi-yah! {PLAYER}! Do you want to try BATTLE ARCADE?")
}

text BattleArcade_Entrance_Text_SelectTheTypeYouWant
{
    format("Select the type you want to use for arcade.")
}

text BattleArcade_Entrance_Text_IWontForceYou
{
    format("I won't force you to do anything you don't want to do. Some other time, then.")
}

text BattleArcade_Entrance_Text_BattleArcadeIsATraining
{
    format("BATTLE ARCADE is a training course that restricts the type of POKéMON you can use. Select a type first, and then battle using up to three POKéMON of that type. No duplicate POKéMON or items are allowed. If you can win five times in a row, you'll complete the training. However, if you lose even once, the arcade will end there! You can restore your POKéMON between battles, but only twice in total, so use the opportunities very wisely. That's all! Do you want to try BATTLE ARCADE?")
}

text BattleArcade_Entrance_Text_OhYouChangedYour
{
    format("Oh, you changed your mind? Some other time, then.")
}

text BattleArcade_Entrance_Text_YouLostbutTrainYourself
{
    format("You lost...but train yourself and your POKéMON, and try again! I'm looking forward to your next challenge.")
}

text BattleArcade_Entrance_Text_YourResultForThisRestricted
{
    format("Your result for this BATTLE ARCADE set is... You had {STR_VAR_1} win(s) with the {STR_VAR_3}-type POKéMON restriction!")
}

text BattleArcade_Entrance_Text_TheWayYouHandleType
{
    format("The way you handle {STR_VAR_3}-type POKéMON is flawless!")
}

text BattleArcade_Entrance_Text_WhatYouCompletedRestricted
{
    format("What?! You completed BATTLE ARCADE with {STR_VAR_1} type(s)?!")
}

text BattleArcade_Entrance_Text_ThatsExcellentWork
{
    format("That's excellent work!")
}

text BattleArcade_Entrance_Text_ICantBelieveIt
{
    format("I can't believe it... Your achievement is just phenomenal!")
}

text BattleArcade_Entrance_Text_ThisAccomplishmentIsSureTo
{
    format("This accomplishment is sure to go down in dojo history!")
}

text BattleArcade_Entrance_Text_ToCommemorateThisMonumentalAchievement
{
    format("To commemorate this monumental achievement, I'll grant you this!")
}

text BattleArcade_Entrance_Text_IHopeYoullKeep
{
    format("I hope you'll keep exceeding your own limits!")
}

text BattleArcade_Entrance_Text_DidntSaveBeforeQuitting
{
    format("Oops! {PLAYER}, it seems you didn't save before quitting your challenge last time. Because of that, your challenge so far has been disqualified. Sorry!")
}

text BattleArcade_Entrance_Text_ThankYouForPlaying
{
    format("Thanks for playing, {PLAYER}!")
}

text BattleArcade_Entrance_Text_RecordWillBeSaved
{
    format("Your record will be saved soon.")
}

text BattleArcade_Entrance_Text_WeveBeenWaitingForYou
{
    format("We've been waiting for you, {PLAYER}!")
}

text BattleArcade_Entrance_Text_ProgressWillBeSaved
{
    format("Before entering the BATTLE COURT, your progress will be saved. Hang tight!")
}

text BattleArcade_Entrance_Text_ThereWasAGlitch
{
    format("Oops! There was a glitch, and your record couldn't be saved. Better luck next time!")
}

text BattleArcade_Entrance_Text_OffersTwoLevels
{
    format("BATTLE ARCADE offers two levels of challenge, Level 50 and Open Level. So, which one is your pick?")
}

text BattleArcade_Entrance_Text_BeforeDivingInto
{
    format("Before diving into BATTLE ARCADE, your progress must be saved. Is that cool?")
}


text BattleArcade_Entrance_Text_NotEnoughValidMonsLv50Singles
{
    format("Hold up, {PLAYER}! You need three different POKéMON of Level 50 or less to enter. They must all share the {STR_VAR_3}-type and hold different items. EGGS{STR_VAR_1} not allowed. Come back when you're ready!")
}

text BattleArcade_Entrance_Text_NotEnoughValidMonsLvOpenSingles
{
    format("Hold up, {PLAYER}! You need three different POKéMON to enter. They must all share the {STR_VAR_3}-type and hold different items. EGGS{STR_VAR_1} not allowed. Come back when you're ready!")
}

text BattleArcade_Entrance_Text_RecordLastMatch
{
    format("Want me to record your last BATTLE ARCADE match on your FRONTIER PASS?")
}

text BattleArcade_Entrance_Text_YouEarned
{
    format("You earned {STR_VAR_2} BP!")
}
text BattleArcade_Entrance_Text_WelcomeToTheBattleArcade
{
	format("Welcome to the Battle Arcade! I am your guide to the Single and Double Battle challenges. Please be aware that these challenges are designed for a single Trainer.")
}
text BattleArcade_Entrance_Text_WhichChallengeWouldYouLike
{
	format("Which challenge would you like to take?")
}
text BattleArcade_Entrance_Text_AtTheBattleArcade
{
	format("At the Battle Arcade, you may take a Single or Double Battle challenge. Here, a game board is activated before every match. Depending on what comes up on the game board, an event takes place. Some events will be good for the challenger, while others won't be. The objective is to keep a winning streak alive as long as possible. During your challenge, any items held by your Pokémon will be kept in storage. If you manage to win seven matches in a row, you will earn Battle Points (BP). If you want to interrupt your challenge, please save the game. If you don't save, you will be disqualified from your challenge. Please be aware of that!")
}
text BattleArcade_Entrance_Text_WelcomeToTheBattleArcadeMulti
{
	format("Welcome to the Battle Arcade! I am your guide to the Multi Battle challenge. Please be aware that this challenge requires two Trainers.")
}
text BattleArcade_Entrance_Text_WouldYouLikeToTake
{
	format("Would you like to take the Battle Arcade Multi Battle challenge?")
}
text BattleArcade_Entrance_Text_YouMayTeamUpWith
{
	format("You may team up with a friend for a Multi Battle challenge. Here, a game board is activated before every match. Depending on what comes up on the game board, an event takes place. The events may have great impact on the match's outcome, good or bad. The objective is to keep a winning streak alive as long as possible. During your challenge, any items held by your Pokémon will be kept in storage. If you manage to win seven matches in a row, you will earn Battle Points (BP). Please note: a Battle Arcade Multi Battle challenge can't be interrupted.")
}
text BattleArcade_Entrance_Text_WeHopeToSeeYou
{
	format("We hope to see you again!")
}
text BattleArcade_Entrance_Text_PleaseSelectThePokemonYou
{
	format("Please select the Pokémon you wish to enter.")
}
text BattleArcade_Entrance_Text_ExcuseMeYouDont
{
	format("Excuse me! You don't have {STR_VAR_1} eligible Pokémon. You must have {STR_VAR_2} different Pokémon to enter.")
}
text BattleArcade_Entrance_Text_AlsoEggsAreIneligible
{
	format("Also, Eggs are ineligible to enter.")
}
text BattleArcade_Entrance_Text_EggsAndAre
{
	format("Eggs and {STR_VAR_1} are not allowed to enter.")
}
text BattleArcade_Entrance_Text_PleaseComeSeeMeWhen
{
	format("Please come see me when you are ready.")
}
text BattleArcade_Entrance_Text_RightThisWayPlease
{
	format("Right this way, please!")
}
text BattleArcade_Entrance_Text_WeveMissedYou
{
	format("We've missed you! You must save the game before you resume your challenge. Please wait.")
}
text BattleArcade_Entrance_Text_ExcuseMeYouDidnt
{
	format("Excuse me! You didn't save before you quit your challenge last time. Because of that, you have been disqualified from your challenge!")
}
text BattleArcade_Entrance_Text_CongratulationsInHonorOf
{
	format("Congratulations! In honor of your victory, we present you with this commemorative print!")
}
text BattleArcade_Entrance_Text_TheGoldPrintWasAdded
{
	format("The Gold Print was added to {PLAYER}'s Vs. Recorder!")
}
text BattleArcade_Entrance_Text_TheSilverPrintWasAdded
{
	format("The Silver Print was added to {PLAYER}'s Vs. Recorder!")
}
text BattleArcade_Entrance_Text_SingleBattle
{
	format("SINGLE BATTLE")
}
text BattleArcade_Entrance_Text_DoubleBattle
{
	format("DOUBLE BATTLE")
}
text BattleArcade_Entrance_Text_TakeChallenge
{
	format("TAKE CHALLENGE")
}
text BattleArcade_Entrance_Text_Info
{
	format("INFO")
}
text BattleArcade_Entrance_Text_Cancel
{
	format("CANCEL")
}
text BattleArcade_Entrance_Text_OneTrainerShouldSelectBecome
{
	format("One Trainer should select “BECOME LEADER.” The other Trainer must select “JOIN GROUP.”")
}
text BattleArcade_Entrance_Text_WeNeedToLaunchDs
{
	format("We need to launch DS Wireless Communications.")
}
text BattleArcade_Entrance_Text_YouMustSaveTheGame
{
	format("You must save the game before I show you in. Please wait.")
}
text BattleArcade_Entrance_Text_ThoseWhoRuleTheGame
{
	format("Those who rule the game board reign at the Battle Arcade! It sounds sort of profound, but it's actually no-kidding obvious!")
}
text BattleArcade_Entrance_Text_ItAllComesDownTo
{
	format("It all comes down to luck here… My cute Pokémon… They were helplessly frozen.")
}
text BattleArcade_Entrance_Text_TheresNothingYouCan
{
	format("There's nothing you can do about luck. It's just there or not.")
}
text BattleArcade_Entrance_Text_DontBeAwestruckWatching
{
	format("Don't be awestruck watching the motion of the game board. If you don't stop it in 30 seconds, it will stop by itself.")
}
text BattleArcade_Entrance_Text_TheBrainHasAPeculiar
{
	format("The Brain has a peculiar fashion sense. She flits around oddly, too. Kind of like this. A little bump, a wiggle… …Please don't look at me that way. It's not nice.")
}
text BattleArcade_Entrance_Text_YikesTheyCanEven
{
	format("Yikes, they can even start battles with the move Trick Room in effect? A strategy built around Speed could backfire right in your face!")
}
text BattleArcade_Entrance_Text_BeThrilledByTheUnknown
{
	format("Be thrilled by the unknown hand of luck! Leap into battles ruled by fickle fate! That's how you enjoy the Battle Arcade!")
}
text BattleArcade_Entrance_Text_BlamingTheGameBoardFor
{
	format("Blaming the game board for losing is pitiful. It's poor form. The game board will show better choices the greater the wins you achieve.")
}
text BattleArcade_Entrance_Text_DidYouFigureThisOne
{
	format("Did you figure this one out? Poisoning or freezing events can be made ineffective. …If the Pokémon's type or ability protects it from such status problems.")
}
text BattleArcade_Entrance_Text_IfTheGameBoardTriggers
{
	format("If the game board triggers a paralyzing event here, Ground types aren't affected.")
}
#endif
