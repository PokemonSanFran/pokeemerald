const VAR_ATTENDANT_TALKED = VAR_TEMP_2
const CHALLENGE_STATUS_UNKNOWN = 0
const CHALLENGE_STATUS_END = 255

const LOCAL_VAR_PARTY_SIZE = VAR_0x8005

script BattleArcade_Registration_EventScript_SinglesAttendant
{
    setvar(VAR_ATTENDANT_TALKED,FRONTIER_MODE_SINGLES)
    goto(BattleArcade_Registration_EventScript_Attendant)
}

script BattleArcade_Registration_EventScript_MultisAttendant
{
    setvar(VAR_ATTENDANT_TALKED,FRONTIER_MODE_MULTIS)
    goto(BattleArcade_Registration_EventScript_Attendant)
}


script BattleArcade_Registration_EventScript_Attendant
{
	//arcade_playgameboard
	//end
    lock
    faceplayer
    setvar(VAR_FRONTIER_FACILITY,FRONTIER_FACILITY_ARCADE)

    special(SavePlayerParty)
    if (var(VAR_ATTENDANT_TALKED) == FRONTIER_MODE_SINGLES)
	{
		msgbox(BattleArcade_Entrance_Text_WelcomeToTheBattleArcade)
		goto(BattleArcade_Registration_EventScript_AskEnterChallenge)
	}
    else
	{
		msgbox(BattleArcade_Entrance_Text_WelcomeToTheBattleArcadeMulti, MSGBOX_DEFAULT)
		goto(BattleArcade_Registration_EventScript_AskEnterMultiChallenge)
	}
}

script BattleArcade_Registration_EventScript_AskEnterChallenge
{
    message(BattleArcade_Entrance_Text_WhichChallengeWouldYouLike)
    waitmessage
    multichoice(17, 4, MULTI_CHALLENGE_TYPES_INFO, FALSE)
    switch(var(VAR_RESULT))
    {
        case 0:
        case 1:
            copyvar(VAR_FRONTIER_BATTLE_MODE, VAR_RESULT)
            goto(BattleArcade_Registration_EventScript_TryEnterChallenge)
        case 2:
            goto(BattleArcade_Registration_EventScript_ExplainChallenge)
        case 3:
        case MULTI_B_PRESSED:
            goto(BattleArcade_Registration_EventScript_CancelChallenge)
    }
}

script BattleArcade_Registration_EventScript_AskEnterMultiChallenge
{
	message(BattleArcade_Entrance_Text_WouldYouLikeToTake)
	waitmessage
	multichoice(17,5,MULTI_CHALLENGEINFO, FALSE)
	switch(var(VAR_RESULT))
	{
		case 0:
            setvar(VAR_FRONTIER_BATTLE_MODE, FRONTIER_MODE_LINK_MULTIS)
			goto(BattleArcade_Registration_EventScript_TryEnterChallenge)
		case 1:
				goto(BattleArcade_Registration_EventScript_ExplainChallenge)
		case 2:
		case MULTI_B_PRESSED:
				goto(BattleArcade_Registration_EventScript_CancelChallenge)
	}
}

script BattleArcade_Registration_EventScript_ExplainChallenge
{
    if (var(VAR_ATTENDANT_TALKED) == FRONTIER_MODE_SINGLES)
    {
        msgbox(BattleArcade_Entrance_Text_AtTheBattleArcade, MSGBOX_DEFAULT)
        goto(BattleArcade_Registration_EventScript_AskEnterChallenge)
    }
    else
    {
        msgbox(BattleArcade_Entrance_Text_YouMayTeamUpWith, MSGBOX_DEFAULT)
        goto(BattleArcade_Registration_EventScript_AskEnterMultiChallenge)
    }
}

script BattleArcade_Registration_EventScript_TryEnterChallenge
{
    message(BattleArcade_Entrance_Text_WhichLevelMode)
    waitmessage
    multichoice(17, 4, MULTI_LEVEL_MODE, FALSE)
    switch(var(VAR_RESULT))
    {
        case FRONTIER_LVL_TENT: goto(BattleArcade_Registration_EventScript_CancelChallenge)
        case MULTI_B_PRESSED: goto(BattleArcade_Registration_EventScript_CancelChallenge)
    }
    frontier_checkineligible
    if (var(VAR_0x8004))
    {
        call(BattleArcade_Registration_EventScript_GetPartySize)
        goto(BattleArcade_Registration_EventScript_NotEnoughValidMons)
    }
    frontier_set(FRONTIER_DATA_LVL_MODE, VAR_RESULT)
    msgbox(BattleArcade_Entrance_Text_PleaseSelectThePokemonYou, MSGBOX_DEFAULT)

    fadescreen(FADE_TO_BLACK)
    frontier_get(FRONTIER_DATA_LVL_MODE)
    copyvar(VAR_0x8004, VAR_RESULT)
    call(BattleArcade_Registration_EventScript_GetPartySize)

    special(ChoosePartyForBattleFrontier)
    waitstate
    if (var(VAR_RESULT) == 0)
    {
        goto(BattleArcade_Registration_EventScript_LoadPartyCancelChallenge)
    }
    goto(BattleArcade_Registration_EventScript_SaveBeforeChallenge)
}

script BattleArcade_Registration_EventScript_GetPartySize
{
    switch(var(VAR_FRONTIER_BATTLE_MODE))
    {
        case FRONTIER_MODE_SINGLES: setvar(LOCAL_VAR_PARTY_SIZE, FRONTIER_PARTY_SIZE)
        case FRONTIER_MODE_DOUBLES: setvar(LOCAL_VAR_PARTY_SIZE, FRONTIER_PARTY_SIZE)
        case FRONTIER_MODE_LINK_MULTIS: setvar(LOCAL_VAR_PARTY_SIZE, FRONTIER_MULTI_PARTY_SIZE)
    }
    return
}

script BattleArcade_Registration_EventScript_NotEnoughValidMons
{
    buffernumberstring(STR_VAR_2,LOCAL_VAR_PARTY_SIZE)
    msgbox(BattleArcade_Entrance_Text_ExcuseMeYouDont, MSGBOX_DEFAULT)

    call(BattleFrontier_EventScript_GetLvlMode)
    if(var(VAR_RESULT) == FRONTIER_LVL_50)
    {
        msgbox(BattleArcade_Entrance_Text_UnderLevel50, MSGBOX_DEFAULT)
    }
    msgbox(BattleArcade_Entrance_Text_EggsAndAre, MSGBOX_DEFAULT)
    closemessage
    end
}

script BattleArcade_Registration_EventScript_LoadPartyCancelChallenge
{
    special(LoadPlayerParty)
    goto(BattleArcade_Registration_EventScript_CancelChallenge)
}

script BattleArcade_Registration_EventScript_CancelChallenge
{
    msgbox(BattleArcade_Entrance_Text_WeHopeToSeeYou,MSGBOX_DEFAULT)
    release
    end
}

script BattleArcade_Registration_EventScript_SaveBeforeChallenge
{
    frontier_set(FRONTIER_DATA_SELECTED_MON_ORDER)
    setvar(VAR_TEMP_CHALLENGE_STATUS, 0)
    arcade_init
    arcade_set(ARCADE_DATA_WIN_STREAK_ACTIVE, TRUE)
    frontier_set(FRONTIER_DATA_PAUSED, FALSE)
    special(LoadPlayerParty)
    closemessage
    delay(2)

    if (var(VAR_FRONTIER_BATTLE_MODE) == FRONTIER_MODE_LINK_MULTIS)
	{
		arcade_save(0)
		goto(BattleArcade_Entrance_LinkMulti_EventScript_Cancel)
	}

    call(Common_EventScript_SaveGame)
    setvar(VAR_TEMP_CHALLENGE_STATUS, CHALLENGE_STATUS_END)

    if (var(VAR_RESULT) == 0)
    {
        frontier_set(FRONTIER_DATA_CHALLENGE_STATUS)
        goto(BattleArcade_Registration_EventScript_CancelChallenge)
    }

    call(BattleArcade_Registration_EventScript_HandleMultiplayer)
    goto(BattleArcade_Registration_EventScript_EnterElevator)
}

script BattleArcade_Registration_EventScript_HandleMultiplayer
{
    if (var(VAR_FRONTIER_BATTLE_MODE) != FRONTIER_MODE_LINK_MULTIS)
    {
        return
    }

    specialvar(VAR_RESULT, IsWirelessAdapterConnected)
    if (var(VAR_RESULT))
    {
        goto(BattleFrontier_BattleTowerLobby_EventScript_TryWirelessLink)
    }
    goto(BattleFrontier_BattleTowerLobby_EventScript_TryCableLink)
}

script BattleArcade_Registration_EventScript_EnterElevator
{
    special(SavePlayerParty)
    setvar(VAR_0x8004, FRONTIER_UTIL_FUNC_SET_PARTY_ORDER)
    call(BattleArcade_Registration_EventScript_GetPartySize)
    special(CallFrontierUtilFunc)
    setvar(VAR_RESULT, 0)
    goto(BattleArcade_Registration_EventScript_GoToHallway)
}

script BattleArcade_Registration_EventScript_GoToHallway
{
    call(BattleArcade_Registration_EventScript_ShowYouToBattleRoom)
    special(HealPlayerParty)
    call(BattleArcade_Lobby_EventScript_WarpToHallway)
    setvar(VAR_TEMP_CHALLENGE_STATUS, 0)
    waitstate
    end
}

script BattleArcade_Registration_EventScript_ShowYouToBattleRoom
{
    msgbox(BattleArcade_Entrance_Text_RightThisWayPlease, MSGBOX_DEFAULT)
    call(BattleArcade_Lobby_EventScript_WalkToElevator)
    return
}

script BattleArcade_Registration_EventScript_GetChallengeStatus
{
    frontier_getstatus
    end
}

script BattleArcade_Registration_EventScript_ResetChallengeStatus
{
    setvar(VAR_TEMP_CHALLENGE_STATUS, CHALLENGE_STATUS_END)
    return
}

script BattleArcade_Registration_EventScript_WonChallenge
{
    lock
    faceplayer

    frontier_isbrain
    if(var(VAR_RESULT))
    {
        call(BattleArcade_Registration_EventScript_CheckStreakAndSymbols)
    }
    call(BattleArcade_Registration_EventScript_ResetChallengeStatus)
    goto(BattleArcade_Registration_EventScript_LookForwardToChallenge)
}

script BattleArcade_Registration_EventScript_CheckStreakAndSymbols
{
    arcade_checksymbol
    switch(var(VAR_RESULT))
    {
        case ARCADE_SYMBOL_SILVER:
            call(BattleArcade_Registration_EventScript_GiveSilverPrint)
        case ARCADE_SYMBOL_GOLD:
            call(BattleArcade_Registration_EventScript_GiveGoldPrint)
        case ARCADE_SYMBOL_NONE:
        default:
            return
    }
}

script BattleArcade_Registration_EventScript_GiveGoldPrint
{
    msgbox(BattleArcade_Entrance_Text_CongratulationsInHonorOf,MSGBOX_DEFAULT)
    msgbox(BattleArcade_Entrance_Text_TheGoldPrintWasAdded,MSGBOX_DEFAULT)
        call(BattleArcade_Registration_EventScript_GivePrint)
}

script BattleArcade_Registration_EventScript_GiveSilverPrint
{
    msgbox(BattleArcade_Entrance_Text_CongratulationsInHonorOf,MSGBOX_DEFAULT)
    msgbox(BattleArcade_Entrance_Text_TheSilverPrintWasAdded,MSGBOX_DEFAULT)
    call(BattleArcade_Registration_EventScript_GivePrint)
}

script BattleArcade_Registration_EventScript_QuitWithoutSaving
{
    lock
    faceplayer
    msgbox(BattleArcade_Entrance_Text_ExcuseMeYouDidnt, MSGBOX_DEFAULT)
    closemessage
    arcade_set(ARCADE_DATA_WIN_STREAK, 0)
    arcade_set(ARCADE_DATA_WIN_STREAK_ACTIVE, FALSE)
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS, CHALLENGE_STATUS_UNKNOWN)
    setvar(VAR_TEMP_CHALLENGE_STATUS, CHALLENGE_STATUS_END)
    release
    end
}

script BattleArcade_Registration_EventScript_GivePrint
{
    call(BattleArcade_Registration_EventScript_CheckandGivePrint)
    call(BattleArcade_Registration_EventScript_PlayFanfareMessage)
}


script BattleArcade_Registration_EventScript_CheckandGivePrint
{
    if (flag(FLAG_ARCADE_SILVER_PRINT))
    {
        setflag(FLAG_ARCADE_GOLD_PRINT)
    }
    else
    {
        setflag(FLAG_ARCADE_SILVER_PRINT)
    }
}

script BattleArcade_Registration_EventScript_PlayFanfareMessage
{
    playfanfare(MUS_OBTAIN_SYMBOL)
    waitmessage
    waitfanfare
}


script BattleArcade_Registration_EventScript_LookForwardToChallenge
{
    msgbox(BattleArcade_Entrance_Text_WeHopeToSeeYou, MSGBOX_DEFAULT)
    closemessage
    release
    end
}

script BattleArcade_Registration_EventScript_LostChallenge
{
    arcade_get(ARCADE_DATA_WIN_STREAK)
    if (var(VAR_RESULT) != 0)
    {
        arcade_set(ARCADE_DATA_WIN_STREAK_ACTIVE, FALSE)
    }
    call(BattleArcade_Registration_EventScript_ResetChallengeStatus)
    goto(BattleArcade_Registration_EventScript_LostThanksForPlaying)
}

script BattleArcade_Registration_EventScript_LostThanksForPlaying
{
    lock
    faceplayer
    msgbox(BattleArcade_Entrance_Text_WeHopeToSeeYou, MSGBOX_DEFAULT)
    closemessage
    setvar(VAR_TEMP_CHALLENGE_STATUS, CHALLENGE_STATUS_END)
    release
    end
}

script BattleArcade_Registration_EventScript_ResumeChallenge
{
    lock
    faceplayer

    message(BattleArcade_Entrance_Text_WeveMissedYou)
    waitmessage

    arcade_save(CHALLENGE_STATUS_SAVING)
    playse(SE_SAVE)
    waitse
    frontier_set(FRONTIER_DATA_PAUSED, FALSE)

    goto(BattleArcade_Registration_EventScript_EnterElevator)
    end
}

script BattleArcade_Entrance_LinkMulti_EventScript_Cancel
{
	msgbox(BattleArcade_Entrance_Text_LinkMultisAreNot)
	closemessage
	frontier_set(FRONTIER_DATA_CHALLENGE_STATUS)
	goto(BattleArcade_Registration_EventScript_CancelChallenge)
}

script BattleArcade_Registration_EventScript_AskModeResultsBoard
{
    lockall
    message(BattleArcade_Entrance_Text_ReadWhichRecord)
    waitmessage
    multichoice(17, 2, MULTI_BATTLE_ARCADE_RECORDS, FALSE)
    switch(var(VAR_RESULT))
	{
		case 2:
			setvar(VAR_RESULT,FRONTIER_MODE_LINK_MULTIS)
			goto(BattleArcade_Registration_EventScript_ShowResults)
		case 3:
		case MULTI_B_PRESSED:
			closemessage
			releaseall
			end
		default:
			goto(BattleArcade_Registration_EventScript_ShowResults)
	}
}

script BattleArcade_Registration_EventScript_ShowResults
{
	closemessage
	copyvar(VAR_0x8006,VAR_RESULT)
	arcade_results(VAR_0x8006)
	goto(BattleArcade_Registration_EventScript_AskModeResultsBoard)
}

text BattleArcade_Entrance_Text_WelcomeToTheBattleArcade
{
	format("Welcome to the Battle Arcade! I am your guide to the Single and Double Battle challenges. Please be aware that these challenges are designed for a single Trainer.")
}

text BattleArcade_Entrance_Text_WelcomeToTheBattleArcadeMulti
{
	format("Welcome to the Battle Arcade! I am your guide to the Multi Battle challenge. Please be aware that this challenge requires two Trainers.")
}

text BattleArcade_Entrance_Text_WhichChallengeWouldYouLike
{
	format("Which challenge would you like to take?")
}

text BattleArcade_Entrance_Text_WouldYouLikeToTake
{
	format("Would you like to take the Battle Arcade Multi Battle challenge?")
}

text BattleArcade_Entrance_Text_WhichLevelMode
{
    format("The BATTLE ARCADE offers two levels of challenge, Level 50 and Open Level. Which is your choice?")
}

text BattleArcade_Entrance_Text_PleaseSelectThePokemonYou
{
	format("Please select the Pokémon you wish to enter.")
}

text BattleArcade_Entrance_Text_ExcuseMeYouDont
{
	format("Excuse me! You don't have {STR_VAR_2} eligible Pokémon. You must have {STR_VAR_2} different Pokémon to enter.")
}

text BattleArcade_Entrance_Text_UnderLevel50
{
    format("The {STR_VAR_2} different Pokémon must all be Level 50 or lower.")
}

text BattleArcade_Entrance_Text_EggsAndAre
{
	format("Eggs{STR_VAR_1} are not allowed to enter.")
}

text BattleArcade_Entrance_Text_PleaseComeSeeMeWhen
{
	format("Please come see me when you are ready.")
}

text BattleArcade_Entrance_Text_RightThisWayPlease
{
	format("Right this way, please!")
}

text BattleArcade_Entrance_Text_AtTheBattleArcade
{
	format("At the Battle Arcade, you may take a Single or Double Battle challenge. Here, a game board is activated before every match. Depending on what comes up on the game board, an event takes place. Some events will be good for the challenger, while others won't be. The objective is to keep a winning streak alive as long as possible. During your challenge, any items held by your Pokémon will be kept in storage. If you manage to win seven matches in a row, you will earn Battle Points (BP). If you want to interrupt your challenge, please save the game. If you don't save, you will be disqualified from your challenge. Please be aware of that!")
}

text BattleArcade_Entrance_Text_YouMayTeamUpWith
{
	format("You may team up with a friend for a Multi Battle challenge. Here, a game board is activated before every match. Depending on what comes up on the game board, an event takes place. The events may have great impact on the match's outcome, good or bad. The objective is to keep a winning streak alive as long as possible. During your challenge, any items held by your Pokémon will be kept in storage. If you manage to win seven matches in a row, you will earn Battle Points (BP). Please note: a Battle Arcade Multi Battle challenge can't be interrupted.")
}

text BattleArcade_Entrance_Text_WeveMissedYou
{
	format("We've missed you! You must save the game before you resume your challenge. Please wait.")
}

text BattleArcade_Entrance_Text_ExcuseMeYouDidnt
{
	format("Excuse me! You didn't save before you quit your challenge last time. Because of that, you have been disqualified from your challenge!")
}

text BattleArcade_Entrance_Text_CongratulationsInHonorOf
{
	format("Congratulations! In honor of your victory, we present you with this commemorative print!")
}

text BattleArcade_Entrance_Text_TheSilverPrintWasAdded
{
	format("The Silver Print was added to {PLAYER}'s Vs. Recorder!")
}

text BattleArcade_Entrance_Text_TheGoldPrintWasAdded
{
	format("The Gold Print was added to {PLAYER}'s Vs. Recorder!")
}

text BattleArcade_Entrance_Text_WeHopeToSeeYou
{
	format("We hope to see you again!")
}

text BattleArcade_Entrance_Text_ReadWhichRecord
{
    format("Which record would you like to see?")
}

text BattleArcade_Entrance_Text_LinkMultisAreNot
{
	format("I'm sorry! Link Multi Battles have not been implemented at this time. Please come back later.")
}

// These are not used because Link Multis have not been implemented.

text BattleArcade_Entrance_Text_OneTrainerShouldSelectBecome
{
	format("One Trainer should select “BECOME LEADER.” The other Trainer must select “JOIN GROUP.”")
}
text BattleArcade_Entrance_Text_WeNeedToLaunchDs
{
	format("We need to launch DS Wireless Communications.")
}
text BattleArcade_Entrance_Text_YouMustSaveTheGame
{
	format("You must save the game before I show you in. Please wait.")
}

script GiveMonDebugScript
{
    givemon(SPECIES_SALAMENCE, 50, ITEM_LEFTOVERS)
    givemon(SPECIES_METAGROSS, 50, ITEM_CHOICE_BAND)
    givemon(SPECIES_LATIOS, 50, ITEM_LUM_BERRY)
    givemon(SPECIES_NUZLEAF,50,ITEM_STARF_BERRY)
    setflag(FLAG_SYS_POKEMON_GET)
    return
}
