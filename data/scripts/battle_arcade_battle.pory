#ifdef BATTLE_ARCADE
// If you pulled the `battle_arcade` branch, this feature will not work out of the box.
// data/maps/BattleArcade_Lobby/scripts.inc has the mapscripts that are required to go in the entrance or lobby of your intended Battle Facility.
// data/maps/BattleArcade_BattleRoom/scripts.inc has the mapscripts that are required to go in the arena of Battle Room of your intended Battle Facility.
// data/scripts/battle_arcade_registration.inc and data/scritps/battle_arcade_battle.inc have all of the scripts for Battle Arcade to work, but all of the calls to map specific scripts have been commented out.
// You will need to manually re-enable them.
// Read more on the feature's wiki:
// https://github.com/PokemonSanFran/pokeemerald/wiki/battle_arcade#script-dependency

const PLAYER = OBJ_EVENT_ID_PLAYER

const CHALLENGE_STATUS_UNKNOWN = 0
const CHALLENGE_STATUS_END = 255

const VAR_FACILITY_CHALLENGE_STATUS = VAR_TEMP_0
const VAR_NEED_TO_FACE_NORTH = VAR_TEMP_1
const VAR_CURRENT_BATTLE_NUM = VAR_TEMP_E

script BattleArcade_RouletteRoom_EventScript_RefreshOpponent
{
    tower_setopponent
    call(BattleArcade_BattleRoom_EventScript_RefreshOpponentObject)
    return
}

script BattleArcade_RouletteRoom_EventScript_SetUpOpponent
{
    setvar(VAR_TEMP_0,1)
    call(BattleArcade_RouletteRoom_EventScript_RefreshOpponent)
    call(BattleArcade_BattleRoom_EventScript_EnterRoomMovement)
    goto(BattleArcade_RouletteRoom_EventScript_OpponentEnter)
}

script BattleArcade_RouletteRoom_EventScript_OpponentEnter
{
    call(BattleArcade_BattleRoom_EventScript_OpponentEnterMovement)

    frontier_get(FRONTIER_DATA_BATTLE_NUM)
    if (var(VAR_RESULT) == 0){
        msgbox(BattleArcade_RouletteRoom_Text_LetTheBattle,MSGBOX_DEFAULT)
    }
    else
    {
        copyvar(VAR_CURRENT_BATTLE_NUM, VAR_RESULT)
            addvar(VAR_CURRENT_BATTLE_NUM,1)
            buffernumberstring(STR_VAR_1,VAR_CURRENT_BATTLE_NUM)
            msgbox(BattleArcade_RouletteRoom_Text_Next,MSGBOX_DEFAULT)
    }

    delay(15)

    msgbox(BattleArcade_RouletteRoom_Text_Go,MSGBOX_DEFAULT)
    closemessage
    arcade_getopponentintro
    msgbox(gStringVar4,MSGBOX_DEFAULT)
    waitmessage

    call(BattleArcade_RouletteRoom_EventScript_DoTowerBattle)
    if (var(VAR_RESULT) == B_OUTCOME_WON)
    {
        goto(BattleArcade_RouletteRoom_EventScript_DefeatedOpponent)
    }

    goto(BattleArcade_RouletteRoom_EventScript_WarpToEntranceLost)
}

script BattleArcade_RouletteRoom_EventScript_WarpToEntranceLost
{
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS,CHALLENGE_STATUS_LOST)
    arcade_set(ARCADE_DATA_LVL_MODE)
    goto(BattleArcade_RouletteRoom_EventScript_WarpToEntrance)
}

script BattleArcade_RouletteRoom_EventScript_WarpToEntrance
{
    warp(MAP_BATTLE_ARCADE_LOBBY,7,8)
    waitstate
    end
}

script BattleArcade_RouletteRoom_EventScript_DefeatedOpponent
{
    arcade_setbattlewon
    call(BattleArcade_BattleRoom_EventScript_DeafeatedOpponentMovement)
    call(BattleArcade_RouletteRoom_EventScript_StopChallenge)
    msgbox(BattleArcade_RouletteRoom_Text_WellDone,MSGBOX_DEFAULT)
    goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
}

script BattleArcade_RouletteRoom_EventScript_StopChallenge
{
    arcade_checkmaxstreak
    if (!var(VAR_RESULT))
    {
        return
    }
    msgbox(BattleArcade_Entrance_MaxedOutStreak,MSGBOX_DEFAULT)
    goto(BattleArcade_RouletteRoom_EventScript_WarpToEntranceWon)
}

script BattleArcade_RouletteRoom_EventScript_AskReadyGetMenu
{
    message(BattleArcade_RouletteRoom_Text_DoYouWantToContinue)
    waitmessage
    arcade_getcontinuemenutype
    return
}

script BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent
{
    call(BattleArcade_RouletteRoom_EventScript_AskReadyGetMenu)
    switch(var(VAR_RESULT))
    {
        case ARCADE_RECORDYES_HEALYES: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordYesHealYes)
        case ARCADE_RECORDYES_HEALNO: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordYesHealNo)
        case ARCADE_RECORDNO_HEALYES: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordNoHealYes)
        case ARCADE_RECORDNO_HEALNO: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordNoHealNo)
    }
}

script BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordYesHealNo
{
    multichoice(22,4,MULTI_GO_ON_RECORD_REST_RETIRE,TRUE)
    switch(var(VAR_RESULT))
    {
        case 0: goto(BattleArcade_RouletteRoom_EventScript_ContinueChallenge)
        case 1: goto(BattleArcade_RouletteRoom_EventScript_AskRecordBattle)
        case 2: goto(BattleArcade_RouletteRoom_EventScript_AskPauseChallenge)
        case 3: goto(BattleArcade_RouletteRoom_EventScript_AskRetireChallenge)
        case MULTI_B_PRESSED: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
    }
    return
}

script BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordNoHealNo
{
    multichoice(22,5,MULTI_GO_ON_REST_RETIRE,TRUE)
    switch(var(VAR_RESULT))
    {
        case 0: goto(BattleArcade_RouletteRoom_EventScript_ContinueChallenge)
        case 1: goto(BattleArcade_RouletteRoom_EventScript_AskPauseChallenge)
        case 2: goto(BattleArcade_RouletteRoom_EventScript_AskRetireChallenge)
        case 3: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
    }
    return
}

script BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordYesHealYes
{
    multichoice(22,2,MULTI_GO_ON_HEAL_RECORD_REST_RETIRE,TRUE)
    switch(var(VAR_RESULT))
    {
        case 0: goto(BattleArcade_RouletteRoom_EventScript_ContinueChallenge)
        case 1: goto(BattleArcade_RouletteRoom_EventScript_AskHeal)
        case 2: goto(BattleArcade_RouletteRoom_EventScript_AskRecordBattle)
        case 3: goto(BattleArcade_RouletteRoom_EventScript_AskPauseChallenge)
        case 4: goto(BattleArcade_RouletteRoom_EventScript_AskRetireChallenge)
        case MULTI_B_PRESSED: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
    }
    return
}

script BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordNoHealYes
{
    multichoice(22,4,MULTI_GO_ON_HEAL_REST_RETIRE,TRUE)
    switch(var(VAR_RESULT))
    {
        case 0: goto(BattleArcade_RouletteRoom_EventScript_ContinueChallenge)
        case 1: goto(BattleArcade_RouletteRoom_EventScript_AskHeal)
        case 2: goto(BattleArcade_RouletteRoom_EventScript_AskPauseChallenge)
        case 3: goto(BattleArcade_RouletteRoom_EventScript_AskRetireChallenge)
        case 4: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
    }
    return
}

script BattleArcade_RouletteRoom_EventScript_AskHeal
{
    buffernumberstring(STR_VAR_1, VAR_ARCADE_HEAL_COUNT)
    msgbox(BattleArcade_RouletteRoom_Text_DoYouWantToRestore,MSGBOX_YESNO)
    waitmessage
    if(var(VAR_RESULT) == YES)
    {
        frontier_restorehelditems
        arcade_restore
        goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent_PostHeal)
    }
    goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
}

script BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent_PostHeal
{
    call(BattleArcade_RouletteRoom_EventScript_AskReadyGetMenu)
    switch(var(VAR_RESULT))
    {
        case ARCADE_RECORDYES_HEALYES:
        case ARCADE_RECORDYES_HEALNO: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordYesHealNo)
        case ARCADE_RECORDNO_HEALYES:
        case ARCADE_RECORDNO_HEALNO: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponentRecordNoHealNo)
    }
}

script BattleArcade_RouletteRoom_EventScript_AskRecordBattle
{
    msgbox(BattleArcade_Entrance_Text_RecordLastMatch,MSGBOX_YESNO)
    waitmessage
    if(var(VAR_RESULT) == YES)
    {
        call(BattleFrontier_EventScript_SaveBattle)
    }
    goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
}

script BattleArcade_RouletteRoom_EventScript_AskPauseChallenge
{
    msgbox(BattleFrontier_BattleTowerBattleRoom_Text_SaveAndQuitGame,MSGBOX_YESNO)
    waitmessage
    switch (var(VAR_RESULT))
    {
        case YES: goto(BattleArcade_RouletteRoom_EventScript_PauseChallenge)
        case NO:
        case MULTI_B_PRESSED: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
    }
}

script BattleArcade_RouletteRoom_EventScript_AskRetireChallenge
{
    msgbox(BattleFrontier_BattleTowerBattleRoom_Text_CancelYourChallenge,MSGBOX_YESNO)
    waitmessage
    switch(var(VAR_RESULT))
    {
        case YES: goto(BattleArcade_RouletteRoom_EventScript_WarpToEntranceWon)
        case NO:
        case MULTI_B_PRESSED: goto(BattleArcade_RouletteRoom_EventScript_AskReadyForOpponent)
    }
}

script BattleArcade_RouletteRoom_EventScript_ContinueChallenge
{
    closemessage
    call(BattleArcade_RouletteRoom_EventScript_RefreshOpponent)
    call(BattleArcade_BattleRoom_EventScript_ContinueChallengeMovement)
    goto(BattleArcade_RouletteRoom_EventScript_OpponentEnter)
}

script BattleArcade_RouletteRoom_EventScript_WarpToEntranceWon
{
    frontier_set(FRONTIER_DATA_CHALLENGE_STATUS,CHALLENGE_STATUS_WON)
    arcade_set(TOWER_DATA_LVL_MODE)
    goto(BattleArcade_RouletteRoom_EventScript_WarpToEntrance)
}

script BattleArcade_RouletteRoom_EventScript_PauseChallenge
{
    message(BattleFrontier_BattleTowerBattleRoom_Text_SavingPleaseWait)
    waitmessage
    arcade_save(CHALLENGE_STATUS_PAUSED)
    playse(SE_SAVE)
    waitse
    fadescreen(FADE_TO_BLACK)
    frontier_reset
    end
}

script BattleArcade_RouletteRoom_EventScript_DoTowerBattle
{
    closemessage
    setvar(VAR_TEMP_2,0)
    frontier_set(FRONTIER_DATA_RECORD_DISABLED,FALSE)
    setvar(VAR_0x8004,SPECIAL_BATTLE_ARCADE)
    setvar(VAR_0x8005,0)
    special(DoSpecialTrainerBattle)
    waitstate
    copyvar(VAR_0x8004,VAR_FRONTIER_BATTLE_MODE)
    arcade_restorehelditems
    arcade_resetsketch
    frontier_get(FRONTIER_DATA_BATTLE_OUTCOME)
    return
}

text BattleArcade_RouletteRoom_Text_WellDone
{
    format("Well done!")
}

text BattleArcade_RouletteRoom_Text_LetTheBattle
{
    format("Let the battles begin! Battle No. 1! Ready...")
}

text BattleArcade_RouletteRoom_Text_Next
{
    format("Next. Battle No. {STR_VAR_1}! Ready...")
}

text BattleArcade_RouletteRoom_Text_Go
{
    format("Go!")
}

text BattleArcade_RouletteRoom_Text_DoYouWantToContinue
{
    format("Do you want to continue arcade?")
}

text BattleArcade_RouletteRoom_Text_DoYouWantToRestore
{
    format("Do you want to restore your POKéMON? (You can restore them {STR_VAR_1} more time(s).)")
}

text BattleArcade_Entrance_MaxedOutStreak
{
    format("Wow, {PLAYER}, {STR_VAR_1} win(s) in a row... I think we all need a break!")
}
#endif
